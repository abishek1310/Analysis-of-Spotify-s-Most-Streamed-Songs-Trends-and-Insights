# -*- coding: utf-8 -*-
"""SpotifyMostStreamedSongs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ID6l3NUc3VnzUjmHZgtoznhGG1eV_24C
"""

import numpy as np
import pandas as pd
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

from google.colab import drive
drive.mount('/content/drive')

df=pd.read_csv('/content/Spotify Most Streamed Songs.csv')
pd.options.display.float_format = '{:,.0f}'.format
df.head()

df.info()

df.isnull().sum()

df.dropna(axis=1,inplace=True)

df.info()

df.columns = df.columns.str.replace('%', '', regex=False)

df['released_year'] = pd.to_numeric(df['released_year']).astype('Int64')
df['released_month'] = pd.to_numeric(df['released_month']).astype('Int64')
df['released_day'] = pd.to_numeric(df['released_day']).astype('Int64')

df['released_date'] = pd.to_datetime(
    dict(year=df['released_year'], month=df['released_month'], day=df['released_day']))

df.head()

df.drop(df[['released_year','released_month','released_day']],axis=1,inplace=True)

df['streams'] = pd.to_numeric(df['streams'], errors='coerce')
df['streams'].isnull().sum()
df['streams'].fillna(0, inplace=True)
df['streams'].isnull().sum()

import seaborn as sns
import matplotlib.pyplot as plt

df.columns

df['artist_count'].value_counts()

df['in_spotify_charts'].unique()

"""UNIVARIATE ANALYSIS"""

df['streams'].describe()
df['streams'].value_counts()
df['streams'].dtype
df['streams']=df['streams'].astype(int)
df['streams'].dtype
df['streams'].describe()

plt.figure(figsize=(16,12))
sns.histplot(df['streams'], bins=30, kde=True)
plt.title('Distribution of Streams')
plt.xlabel('Number of Streams (billions)')
plt.ylabel('count')

df.columns
df['danceability_'].describe()

sns.histplot(df['danceability_'], bins=30, kde=True)
plt.title('Distribution of Danceability')
plt.xlabel('Danceability (%)')
plt.ylabel('Frequency')

df['mode'].unique()

plt.figure(figsize=(8, 4))
sns.countplot(x='mode', data=df)
plt.title('Count of Songs by Mode')

df['energy_'].describe()

sns.histplot(df['energy_'], bins=30, kde=True)
plt.title('Distribution of Energy')
plt.xlabel('Energy (%)')
plt.ylabel('Frequency')

df['artist_count'].value_counts()

count=df['artist_count'].value_counts().reset_index()
count.columns = ['Artist Count', 'Track Count']
sns.barplot(data=count,x='Artist Count',y='Track Count')
plt.xlabel('NUM OF ARTIST')
plt.ylabel('NUM OF SONGS')
plt.title(' Number of artists contributing to the song.')

"""BIVARIATE ANALYSIS"""

sns.scatterplot(x='danceability_', y='streams', data=df)
plt.xticks(rotation=45)
plt.title('Danceability vs. Streams')
plt.xlabel('Danceability (%)')
plt.ylabel('Number of Streams(billons)')
plt.show()

average_streams_by_artist = df.groupby('artist(s)_name')['streams'].mean().sort_values(ascending=False)
average_streams_by_artist.head(10)

plt.figure(figsize=(14,12))
sns.barplot(x=average_streams_by_artist.head(10).index,y=average_streams_by_artist.head(10).values)
plt.xticks(rotation=45)
plt.title("TOP TEN Artist ON STREAM")

plt.figure(figsize=(12, 6))
sns.boxplot(x='artist_count', y='streams', data=df)
plt.title('Streams by Artist Count')
plt.xlabel('Number of Artists')
plt.ylabel('Number of Streams(billons)')

ranks=['streams', 'in_spotify_playlists', 'in_apple_playlists', 'in_deezer_playlists']
artist_popularity = df.groupby('artist(s)_name')[ranks].sum().reset_index()
artist_popularity.head()

artist_popularity.dtypes
artist_popularity['in_deezer_playlists'] = pd.to_numeric(artist_popularity['in_deezer_playlists'], errors='coerce')
artist_popularity['total_streams'] = artist_popularity[['streams','in_spotify_playlists','in_apple_playlists','in_deezer_playlists']].sum(axis=1)
artist_popularity

top_artists = artist_popularity.nlargest(5, 'total_streams')

plt.figure(figsize=(10, 6))
sns.barplot(x='total_streams', y='artist(s)_name',data=top_artists)
plt.title('Top 5 Artists by Total Streams on all P')
plt.xlabel('Total Streams')
plt.xscale('log')
plt.ylabel('Artist Name')
plt.show()

df.head()

"""CORRELATION"""

correlation = df[['streams','danceability_','in_apple_playlists','energy_','artist_count']].corr()
sns.heatmap(correlation, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()